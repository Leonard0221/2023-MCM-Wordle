{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1DXe1qoe0ZhE9YGohESFuaZHeH4_r5W9r","timestamp":1676681546746}],"authorship_tag":"ABX9TyMVqY2DQPW+SLMuxcdB5dYC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"nrkHMtPvDt44","executionInfo":{"status":"ok","timestamp":1676749082051,"user_tz":300,"elapsed":2969,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import torch"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FzTzJE1jDzlo","executionInfo":{"status":"ok","timestamp":1676749082710,"user_tz":300,"elapsed":674,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"ed8e5da5-0501-4df3-ff8e-c8f016a09997"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["cd /content/drive/MyDrive/MCM/data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"up3m3yF0D45s","executionInfo":{"status":"ok","timestamp":1676749082711,"user_tz":300,"elapsed":4,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"53addb39-5894-46a4-ac7b-87ea69fd0561"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCM/data\n"]}]},{"cell_type":"code","source":["data = pd.read_csv('nlp_features_data.csv').drop(columns='Unnamed: 0')  \n","data_label = pd.read_excel('Problem_C_Data_Wordle_label.xlsx' ,usecols=['Contest number','Cluster'], index_col=None,header=1)\n","data_merge = data.merge(data_label)\n","data_merge.rename(columns={'Cluster': 'label'}, inplace=True)\n","train_data = data_merge.iloc[:,12:]\n","train_data['label'] = train_data['label']-1\n","print(train_data[['label']].groupby(train_data.label).agg(\"count\"))\n","train_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"AfdDf6UvEI6K","executionInfo":{"status":"ok","timestamp":1676749083397,"user_tz":300,"elapsed":689,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"b5817a9d-bb88-4a0c-a149-64f9d07e0690"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["       label\n","label       \n","0         94\n","1        166\n","2         98\n"]},{"output_type":"execute_result","data":{"text/plain":["   word_format  max_word_repetition  diff_score  syllable  brown_freq  \\\n","0        12345                    1           1         2           2   \n","1        12345                    1           1         2           1   \n","2        12345                    1           1         2           3   \n","3        12345                    1           1         2           0   \n","4        12342                    2           1         2           0   \n","\n","   reuters_freq  label  \n","0             0      1  \n","1             0      1  \n","2             1      1  \n","3             0      1  \n","4             0      1  "],"text/html":["\n","  <div id=\"df-59eb696f-12d8-4ce7-b8fc-2ed0c4454c55\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","      <th>brown_freq</th>\n","      <th>reuters_freq</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12345</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>12345</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12345</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12345</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>12342</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59eb696f-12d8-4ce7-b8fc-2ed0c4454c55')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-59eb696f-12d8-4ce7-b8fc-2ed0c4454c55 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-59eb696f-12d8-4ce7-b8fc-2ed0c4454c55');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["train_data = train_data.to_numpy()\n","train_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i2BtQqJfxImg","executionInfo":{"status":"ok","timestamp":1676749083398,"user_tz":300,"elapsed":8,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"cc6ced87-faf8-410f-8ee8-a9923c059785"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[12345,     1,     1, ...,     2,     0,     1],\n","       [12345,     1,     1, ...,     1,     0,     1],\n","       [12345,     1,     1, ...,     3,     1,     1],\n","       ...,\n","       [12314,     2,     0, ...,     1,     0,     0],\n","       [12345,     1,     0, ...,     1,     0,     1],\n","       [12345,     1,     0, ...,     8,    29,     1]])"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","data_train, data_val = train_test_split(train_data, test_size=0.1, random_state=42)\n","print(type(data_train))\n","data_train, data_val = torch.tensor(data_train,dtype=torch.float32), torch.tensor(data_val,dtype=torch.float32)\n","print(data_train.size(0),data_val.size(0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_GDyPwLivjkC","executionInfo":{"status":"ok","timestamp":1676749084200,"user_tz":300,"elapsed":807,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"676733c9-9327-41be-e0c5-39880a83e6a2"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'numpy.ndarray'>\n","322 36\n"]}]},{"cell_type":"code","source":["import torch\n","from torch.utils.data import Dataset,WeightedRandomSampler\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import random"],"metadata":{"id":"mPYTOMjnqHnb","executionInfo":{"status":"ok","timestamp":1676749084201,"user_tz":300,"elapsed":5,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device,flush=True)\n","batch_size = 323\n","momentum = 0.9\n","lr = 0.001\n","epochs = 10\n","log_interval = 1000\n","\n","class MyDataset(Dataset):\n","\n","    def __init__(self, data):\n","\n","        self.X = data[:,:-1]\n","        self.y = data[:,-1]\n","    \n","    def __len__(self):\n","        return self.X.size(0)\n","\n","    def __getitem__(self, idx):\n","        return self.X[idx], self.y[idx]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b1aYHqJ-qODs","executionInfo":{"status":"ok","timestamp":1676749084357,"user_tz":300,"elapsed":159,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"df86fbfb-db5c-4459-94b7-94a57d6ac6c4"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["cpu\n"]}]},{"cell_type":"code","source":["train_dataset = MyDataset(data_train)\n","val_dataset = MyDataset(data_val)\n","train_loader = torch.utils.data.DataLoader(\n","    train_dataset, batch_size=batch_size, shuffle=True, num_workers=1)\n","val_loader = torch.utils.data.DataLoader(\n","    val_dataset, batch_size=batch_size, shuffle=False, num_workers=1)"],"metadata":{"id":"C-3Lf-UiqYe_","executionInfo":{"status":"ok","timestamp":1676749084357,"user_tz":300,"elapsed":4,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["class Net(nn.Module):\n","\n","    def __init__(self,input_dim,hidden_dim,output_dim):\n","        super(Net, self).__init__()\n","        self.fc1 = nn.Linear(input_dim, hidden_dim)  \n","        self.fc2 = nn.Linear(hidden_dim, hidden_dim)\n","        self.fc3 = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n"],"metadata":{"id":"13-UDKayxt8H","executionInfo":{"status":"ok","timestamp":1676749084358,"user_tz":300,"elapsed":4,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def train(epoch):\n","    model.train()\n","    epoch_loss = 0\n","    correct = 0\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        data = data.to(device)\n","        target = target.type(torch.long)\n","        target = target.to(device)\n","        optimizer.zero_grad()\n","        output = model(data)\n","        loss = criteria(output, target)\n","        epoch_loss += loss\n","        loss.backward()\n","        optimizer.step()\n","    if epoch%30==0:\n","        print('Train Epoch: {} \\tLoss: {:.6f}'.format(epoch, loss.item()),flush=True)\n","\n","def validation(setname='val',epoch=0):\n","    if epoch%30!=0:\n","        return\n","    model.eval()\n","    validation_loss = 0\n","    correct = 0\n","    if setname == 'train':\n","        dataset = train_loader\n","    elif setname == 'val':\n","        dataset = val_loader\n","    with torch.no_grad():\n","        for data, target in dataset:\n","            data = data.to(device)\n","            target = target.type(torch.long)\n","            target = target.to(device)\n","            output = model(data)\n","            validation_loss += criteria(output, target).item() # sum up batch loss\n","            pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n","            correct += pred.eq(target.data.view_as(pred)).cpu().sum()\n","\n","    validation_loss /= len(dataset.dataset)\n","    if setname == 'train':\n","        # global train_loss_list,train_acc_list\n","        # train_loss_list.append(validation_loss)\n","        # train_acc_list.append(100. * correct / len(train_loader.dataset))\n","        print('Train set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)'.format(\n","            validation_loss, correct, len(train_loader.dataset),\n","            100. * correct / len(train_loader.dataset)),flush=True)\n","    elif setname == 'val':\n","        # global val_loss_list,val_acc_list\n","        # val_loss_list.append(validation_loss)\n","        # val_acc_list.append(100. * correct / len(val_loader.dataset))\n","        print('Validation set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)'.format(\n","            validation_loss, correct, len(val_loader.dataset),\n","            100. * correct / len(val_loader.dataset)),flush=True)\n","        # scheduler.step(round(validation_loss, 2))\n","\n","def setup_seed(seed):\n","     torch.manual_seed(seed)\n","     torch.cuda.manual_seed_all(seed)\n","     np.random.seed(seed)\n","     random.seed(seed)"],"metadata":{"id":"SA2cv_k3xY-V","executionInfo":{"status":"ok","timestamp":1676749084358,"user_tz":300,"elapsed":4,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["input_dim,hidden_dim,output_dim = 6,128,3\n","model = Net(input_dim,hidden_dim,output_dim)\n","optimizer = optim.Adam(model.parameters(), lr=1e-5)\n","epochs = 3000\n","criteria = nn.CrossEntropyLoss()\n","for epoch in range(1,epochs+1):\n","    train(epoch)\n","    validation(setname='train',epoch=epoch)"],"metadata":{"id":"N3-Yhh5TJglR","colab":{"base_uri":"https://localhost:8080/"},"outputId":"06f1431b-5bb8-49f5-ddb5-c070a4b6782e","executionInfo":{"status":"ok","timestamp":1676749307673,"user_tz":300,"elapsed":131011,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Epoch: 30 \tLoss: 195.714294\n","Train set: Average loss: 0.5918, Accuracy: 89/322 (27.64%)\n","Train Epoch: 60 \tLoss: 64.781815\n","Train set: Average loss: 0.1892, Accuracy: 85/322 (26.40%)\n","Train Epoch: 90 \tLoss: 9.483046\n","Train set: Average loss: 0.0276, Accuracy: 151/322 (46.89%)\n","Train Epoch: 120 \tLoss: 2.803365\n","Train set: Average loss: 0.0088, Accuracy: 137/322 (42.55%)\n","Train Epoch: 150 \tLoss: 2.533502\n","Train set: Average loss: 0.0079, Accuracy: 136/322 (42.24%)\n","Train Epoch: 180 \tLoss: 2.512374\n","Train set: Average loss: 0.0078, Accuracy: 137/322 (42.55%)\n","Train Epoch: 210 \tLoss: 2.498646\n","Train set: Average loss: 0.0078, Accuracy: 141/322 (43.79%)\n","Train Epoch: 240 \tLoss: 2.485209\n","Train set: Average loss: 0.0077, Accuracy: 141/322 (43.79%)\n","Train Epoch: 270 \tLoss: 2.472335\n","Train set: Average loss: 0.0077, Accuracy: 141/322 (43.79%)\n","Train Epoch: 300 \tLoss: 2.460229\n","Train set: Average loss: 0.0076, Accuracy: 141/322 (43.79%)\n","Train Epoch: 330 \tLoss: 2.448290\n","Train set: Average loss: 0.0076, Accuracy: 141/322 (43.79%)\n","Train Epoch: 360 \tLoss: 2.436123\n","Train set: Average loss: 0.0076, Accuracy: 140/322 (43.48%)\n","Train Epoch: 390 \tLoss: 2.423813\n","Train set: Average loss: 0.0075, Accuracy: 139/322 (43.17%)\n","Train Epoch: 420 \tLoss: 2.411317\n","Train set: Average loss: 0.0075, Accuracy: 139/322 (43.17%)\n","Train Epoch: 450 \tLoss: 2.398603\n","Train set: Average loss: 0.0074, Accuracy: 138/322 (42.86%)\n","Train Epoch: 480 \tLoss: 2.385684\n","Train set: Average loss: 0.0074, Accuracy: 139/322 (43.17%)\n","Train Epoch: 510 \tLoss: 2.372603\n","Train set: Average loss: 0.0074, Accuracy: 141/322 (43.79%)\n","Train Epoch: 540 \tLoss: 2.359330\n","Train set: Average loss: 0.0073, Accuracy: 140/322 (43.48%)\n","Train Epoch: 570 \tLoss: 2.345878\n","Train set: Average loss: 0.0073, Accuracy: 141/322 (43.79%)\n","Train Epoch: 600 \tLoss: 2.332261\n","Train set: Average loss: 0.0072, Accuracy: 141/322 (43.79%)\n","Train Epoch: 630 \tLoss: 2.318465\n","Train set: Average loss: 0.0072, Accuracy: 139/322 (43.17%)\n","Train Epoch: 660 \tLoss: 2.304494\n","Train set: Average loss: 0.0072, Accuracy: 138/322 (42.86%)\n","Train Epoch: 690 \tLoss: 2.290370\n","Train set: Average loss: 0.0071, Accuracy: 137/322 (42.55%)\n","Train Epoch: 720 \tLoss: 2.276199\n","Train set: Average loss: 0.0071, Accuracy: 137/322 (42.55%)\n","Train Epoch: 750 \tLoss: 2.261921\n","Train set: Average loss: 0.0070, Accuracy: 136/322 (42.24%)\n","Train Epoch: 780 \tLoss: 2.247493\n","Train set: Average loss: 0.0070, Accuracy: 137/322 (42.55%)\n","Train Epoch: 810 \tLoss: 2.232939\n","Train set: Average loss: 0.0069, Accuracy: 138/322 (42.86%)\n","Train Epoch: 840 \tLoss: 2.218247\n","Train set: Average loss: 0.0069, Accuracy: 137/322 (42.55%)\n","Train Epoch: 870 \tLoss: 2.203387\n","Train set: Average loss: 0.0068, Accuracy: 137/322 (42.55%)\n","Train Epoch: 900 \tLoss: 2.188388\n","Train set: Average loss: 0.0068, Accuracy: 140/322 (43.48%)\n","Train Epoch: 930 \tLoss: 2.173252\n","Train set: Average loss: 0.0067, Accuracy: 140/322 (43.48%)\n","Train Epoch: 960 \tLoss: 2.157957\n","Train set: Average loss: 0.0067, Accuracy: 140/322 (43.48%)\n","Train Epoch: 990 \tLoss: 2.142560\n","Train set: Average loss: 0.0067, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1020 \tLoss: 2.127067\n","Train set: Average loss: 0.0066, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1050 \tLoss: 2.111717\n","Train set: Average loss: 0.0066, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1080 \tLoss: 2.096431\n","Train set: Average loss: 0.0065, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1110 \tLoss: 2.081076\n","Train set: Average loss: 0.0065, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1140 \tLoss: 2.065636\n","Train set: Average loss: 0.0064, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1170 \tLoss: 2.050128\n","Train set: Average loss: 0.0064, Accuracy: 141/322 (43.79%)\n","Train Epoch: 1200 \tLoss: 2.034539\n","Train set: Average loss: 0.0063, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1230 \tLoss: 2.018928\n","Train set: Average loss: 0.0063, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1260 \tLoss: 2.003241\n","Train set: Average loss: 0.0062, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1290 \tLoss: 1.987524\n","Train set: Average loss: 0.0062, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1320 \tLoss: 1.971789\n","Train set: Average loss: 0.0061, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1350 \tLoss: 1.956213\n","Train set: Average loss: 0.0061, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1380 \tLoss: 1.940672\n","Train set: Average loss: 0.0060, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1410 \tLoss: 1.925065\n","Train set: Average loss: 0.0060, Accuracy: 141/322 (43.79%)\n","Train Epoch: 1440 \tLoss: 1.909436\n","Train set: Average loss: 0.0059, Accuracy: 141/322 (43.79%)\n","Train Epoch: 1470 \tLoss: 1.893958\n","Train set: Average loss: 0.0059, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1500 \tLoss: 1.878591\n","Train set: Average loss: 0.0058, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1530 \tLoss: 1.863239\n","Train set: Average loss: 0.0058, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1560 \tLoss: 1.847935\n","Train set: Average loss: 0.0057, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1590 \tLoss: 1.832662\n","Train set: Average loss: 0.0057, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1620 \tLoss: 1.817453\n","Train set: Average loss: 0.0056, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1650 \tLoss: 1.802258\n","Train set: Average loss: 0.0056, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1680 \tLoss: 1.787097\n","Train set: Average loss: 0.0055, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1710 \tLoss: 1.771958\n","Train set: Average loss: 0.0055, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1740 \tLoss: 1.756823\n","Train set: Average loss: 0.0055, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1770 \tLoss: 1.741685\n","Train set: Average loss: 0.0054, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1800 \tLoss: 1.726547\n","Train set: Average loss: 0.0054, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1830 \tLoss: 1.711443\n","Train set: Average loss: 0.0053, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1860 \tLoss: 1.696353\n","Train set: Average loss: 0.0053, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1890 \tLoss: 1.681283\n","Train set: Average loss: 0.0052, Accuracy: 140/322 (43.48%)\n","Train Epoch: 1920 \tLoss: 1.666195\n","Train set: Average loss: 0.0052, Accuracy: 139/322 (43.17%)\n","Train Epoch: 1950 \tLoss: 1.650012\n","Train set: Average loss: 0.0051, Accuracy: 141/322 (43.79%)\n","Train Epoch: 1980 \tLoss: 1.634447\n","Train set: Average loss: 0.0051, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2010 \tLoss: 1.619177\n","Train set: Average loss: 0.0050, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2040 \tLoss: 1.604060\n","Train set: Average loss: 0.0050, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2070 \tLoss: 1.589138\n","Train set: Average loss: 0.0049, Accuracy: 140/322 (43.48%)\n","Train Epoch: 2100 \tLoss: 1.574313\n","Train set: Average loss: 0.0049, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2130 \tLoss: 1.559649\n","Train set: Average loss: 0.0048, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2160 \tLoss: 1.545321\n","Train set: Average loss: 0.0048, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2190 \tLoss: 1.531409\n","Train set: Average loss: 0.0048, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2220 \tLoss: 1.517815\n","Train set: Average loss: 0.0047, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2250 \tLoss: 1.504640\n","Train set: Average loss: 0.0047, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2280 \tLoss: 1.491940\n","Train set: Average loss: 0.0046, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2310 \tLoss: 1.479656\n","Train set: Average loss: 0.0046, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2340 \tLoss: 1.467572\n","Train set: Average loss: 0.0046, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2370 \tLoss: 1.455769\n","Train set: Average loss: 0.0045, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2400 \tLoss: 1.444277\n","Train set: Average loss: 0.0045, Accuracy: 140/322 (43.48%)\n","Train Epoch: 2430 \tLoss: 1.433037\n","Train set: Average loss: 0.0044, Accuracy: 140/322 (43.48%)\n","Train Epoch: 2460 \tLoss: 1.421945\n","Train set: Average loss: 0.0044, Accuracy: 140/322 (43.48%)\n","Train Epoch: 2490 \tLoss: 1.411017\n","Train set: Average loss: 0.0044, Accuracy: 140/322 (43.48%)\n","Train Epoch: 2520 \tLoss: 1.400210\n","Train set: Average loss: 0.0043, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2550 \tLoss: 1.389494\n","Train set: Average loss: 0.0043, Accuracy: 141/322 (43.79%)\n","Train Epoch: 2580 \tLoss: 1.378898\n","Train set: Average loss: 0.0043, Accuracy: 142/322 (44.10%)\n","Train Epoch: 2610 \tLoss: 1.368363\n","Train set: Average loss: 0.0042, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2640 \tLoss: 1.357860\n","Train set: Average loss: 0.0042, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2670 \tLoss: 1.347422\n","Train set: Average loss: 0.0042, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2700 \tLoss: 1.336993\n","Train set: Average loss: 0.0042, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2730 \tLoss: 1.326343\n","Train set: Average loss: 0.0041, Accuracy: 143/322 (44.41%)\n","Train Epoch: 2760 \tLoss: 1.309933\n","Train set: Average loss: 0.0041, Accuracy: 144/322 (44.72%)\n","Train Epoch: 2790 \tLoss: 1.292913\n","Train set: Average loss: 0.0040, Accuracy: 144/322 (44.72%)\n","Train Epoch: 2820 \tLoss: 1.278436\n","Train set: Average loss: 0.0040, Accuracy: 146/322 (45.34%)\n","Train Epoch: 2850 \tLoss: 1.265078\n","Train set: Average loss: 0.0039, Accuracy: 146/322 (45.34%)\n","Train Epoch: 2880 \tLoss: 1.253108\n","Train set: Average loss: 0.0039, Accuracy: 145/322 (45.03%)\n","Train Epoch: 2910 \tLoss: 1.241879\n","Train set: Average loss: 0.0039, Accuracy: 148/322 (45.96%)\n","Train Epoch: 2940 \tLoss: 1.233792\n","Train set: Average loss: 0.0038, Accuracy: 148/322 (45.96%)\n","Train Epoch: 2970 \tLoss: 1.228392\n","Train set: Average loss: 0.0038, Accuracy: 149/322 (46.27%)\n","Train Epoch: 3000 \tLoss: 1.213373\n","Train set: Average loss: 0.0038, Accuracy: 146/322 (45.34%)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"pRTOsezL1pIv","executionInfo":{"status":"aborted","timestamp":1676749110990,"user_tz":300,"elapsed":22,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":null,"outputs":[]}]}