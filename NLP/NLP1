{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP6T21ekOfTLsYIwLJyLrcv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":33,"metadata":{"id":"nrkHMtPvDt44","executionInfo":{"status":"ok","timestamp":1676848476399,"user_tz":300,"elapsed":133,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FzTzJE1jDzlo","executionInfo":{"status":"ok","timestamp":1676848477926,"user_tz":300,"elapsed":933,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"5afef77e-40e7-460c-95bf-8d1a207068f9"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["cd /content/drive/MyDrive/MCM/data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"up3m3yF0D45s","executionInfo":{"status":"ok","timestamp":1676848479342,"user_tz":300,"elapsed":4,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"c9d00ded-fca6-4e9b-c4f3-5b989f4179a3"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/MCM/data\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rfTMVFdUHGLs","executionInfo":{"status":"ok","timestamp":1676678632717,"user_tz":300,"elapsed":316,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"9f4958c5-24e2-4cb0-9dfe-b32da710b5f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["clean_data.xlsx  Problem_C_Data_Wordle.xlsx\n"]}]},{"cell_type":"code","source":["datatype = {'Date': pd.datetime, 'Contest number': int, 'Number of reported results': str, 'Number in hard mode': int,\n","            '1 try': int, '2 tries': int, '3 tries': int, '4 tries': int, '5 tries': int, '6 tries': int, '7 or more tries (X)': int}\n","data = pd.read_excel('clean_data.xlsx' ,index_col=None,header=1, dtype=datatype).drop(columns='Unnamed: 0')  \n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"AfdDf6UvEI6K","executionInfo":{"status":"ok","timestamp":1676678633970,"user_tz":300,"elapsed":1254,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"53bfd43d-d0a5-4d49-e86e-adf7100e84fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-9ce6aa05b240>:1: FutureWarning: The pandas.datetime class is deprecated and will be removed from pandas in a future version. Import from datetime module instead.\n","  datatype = {'Date': pd.datetime, 'Contest number': int, 'Number of reported results': str, 'Number in hard mode': int,\n"]},{"output_type":"execute_result","data":{"text/plain":["        Date  Contest number   Word  Number of  reported results  \\\n","0 2022-12-31             560  manly                      20380.0   \n","1 2022-12-30             559  molar                      21204.0   \n","2 2022-12-29             558  havoc                      20001.0   \n","3 2022-12-28             557  impel                      20160.0   \n","4 2022-12-27             556  condo                      20879.0   \n","\n","   Number in hard mode  1 try  2 tries  3 tries  4 tries  5 tries  6 tries  \\\n","0                 1899      0        2       17       37       29       12   \n","1                 1973      0        4       21       38       26        9   \n","2                 1919      0        2       16       38       30       12   \n","3                 1937      0        3       21       40       25        9   \n","4                 2012      0        2       17       35       29       14   \n","\n","   7 or more tries (X)  \n","0                    2  \n","1                    1  \n","2                    2  \n","3                    1  \n","4                    3  "],"text/html":["\n","  <div id=\"df-1919e04f-de5f-4988-8f82-c4f90aae4078\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Contest number</th>\n","      <th>Word</th>\n","      <th>Number of  reported results</th>\n","      <th>Number in hard mode</th>\n","      <th>1 try</th>\n","      <th>2 tries</th>\n","      <th>3 tries</th>\n","      <th>4 tries</th>\n","      <th>5 tries</th>\n","      <th>6 tries</th>\n","      <th>7 or more tries (X)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2022-12-31</td>\n","      <td>560</td>\n","      <td>manly</td>\n","      <td>20380.0</td>\n","      <td>1899</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>37</td>\n","      <td>29</td>\n","      <td>12</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2022-12-30</td>\n","      <td>559</td>\n","      <td>molar</td>\n","      <td>21204.0</td>\n","      <td>1973</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>21</td>\n","      <td>38</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2022-12-29</td>\n","      <td>558</td>\n","      <td>havoc</td>\n","      <td>20001.0</td>\n","      <td>1919</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>16</td>\n","      <td>38</td>\n","      <td>30</td>\n","      <td>12</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2022-12-28</td>\n","      <td>557</td>\n","      <td>impel</td>\n","      <td>20160.0</td>\n","      <td>1937</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>25</td>\n","      <td>9</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022-12-27</td>\n","      <td>556</td>\n","      <td>condo</td>\n","      <td>20879.0</td>\n","      <td>2012</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>35</td>\n","      <td>29</td>\n","      <td>14</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1919e04f-de5f-4988-8f82-c4f90aae4078')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1919e04f-de5f-4988-8f82-c4f90aae4078 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1919e04f-de5f-4988-8f82-c4f90aae4078');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["filter = data['Word'].apply(lambda x:len(x))!=5\n","filter\n","word = data.loc[filter,'Word']\n","print(word.values)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UITTWNP8EtZO","executionInfo":{"status":"ok","timestamp":1676678633970,"user_tz":300,"elapsed":8,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"000bf5ad-b816-4cac-d987-da0f0ea6f678"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]},{"cell_type":"code","source":["data['difficulty'] = data['1 try'] + 2*data['2 tries'] + 3*data['3 tries'] + 4*data['4 tries'] + \\\n","                    5*data['5 tries'] + 6*data['6 tries'] + 10*data['7 or more tries (X)']\n","data['difficulty'].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RswY8mm3FuF4","executionInfo":{"status":"ok","timestamp":1676678633970,"user_tz":300,"elapsed":6,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"7f0dff4b-d1bd-464a-fe82-b608fac9a68c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    440\n","1    417\n","2    446\n","3    418\n","4    454\n","Name: difficulty, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df = pd.DataFrame(data={'Word':['eerie']})\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"0ZBbDJI-22Ob","executionInfo":{"status":"ok","timestamp":1676848482511,"user_tz":300,"elapsed":135,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"cdff26c3-b497-472b-fa74-a5c7e06df08b"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word\n","0  eerie"],"text/html":["\n","  <div id=\"df-2ad3a6d6-1391-42eb-b72d-7dd2f5ae6f3a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ad3a6d6-1391-42eb-b72d-7dd2f5ae6f3a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2ad3a6d6-1391-42eb-b72d-7dd2f5ae6f3a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2ad3a6d6-1391-42eb-b72d-7dd2f5ae6f3a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["def word_repetition(word):\n","    dic = {}\n","    for i in word:\n","        try:\n","            dic[i]+=1\n","        except:\n","            dic[i]=1\n","    l = max(dic.values())\n","    return l\n","    # return dict(sorted(dic.items(), key=lambda item: item[1],reverse=True))\n","\n","def word_format(word):\n","    dic = {}\n","    count = 1\n","    for i in word:\n","        if i not in dic:\n","            dic[i]=count\n","            count+=1\n","    t = [str(dic[i]) for i in word]\n","    return ''.join(t)\n","\n","    return sorted(dic.values(),reverse=True)\n","\n","df['word_format'] = word_format('eerie')\n","df['max_word_repetition'] = word_repetition('eerie')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"0uP7ph7NJoPi","executionInfo":{"status":"ok","timestamp":1676848485891,"user_tz":300,"elapsed":167,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"555a3b0a-aeef-40f6-e55d-520dbc564764"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition\n","0  eerie       11231                    3"],"text/html":["\n","  <div id=\"df-479d58f5-2895-4be0-981a-a437d5fece80\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-479d58f5-2895-4be0-981a-a437d5fece80')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-479d58f5-2895-4be0-981a-a437d5fece80 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-479d58f5-2895-4be0-981a-a437d5fece80');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["temp1 = data['Word'].apply(lambda x:word_format(x))\n","# print(temp)\n","dic1 = {}\n","for i in temp1:\n","    try:\n","        dic1[i]+=1\n","    except:\n","        dic1[i]=1\n","print(dic1)\n","\n","temp2 = data['Word'].apply(lambda x:word_repetition(x))\n","# print(temp)\n","dic2 = {}\n","for i in temp2:\n","    try:\n","        dic2[i]+=1\n","    except:\n","        dic2[i]=1\n","print(dic2)"],"metadata":{"id":"P754TwmK3Rc1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['word_format'] = temp1\n","data['max_word_repetition'] = temp2\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"id":"HHrZBWcrKm2H","executionInfo":{"status":"ok","timestamp":1676678634218,"user_tz":300,"elapsed":10,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"5dfd4bcb-c66a-4c1c-adb3-d1dc246d88c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Date  Contest number   Word  Number of  reported results  \\\n","0 2022-12-31             560  manly                      20380.0   \n","1 2022-12-30             559  molar                      21204.0   \n","2 2022-12-29             558  havoc                      20001.0   \n","3 2022-12-28             557  impel                      20160.0   \n","4 2022-12-27             556  condo                      20879.0   \n","\n","   Number in hard mode  1 try  2 tries  3 tries  4 tries  5 tries  6 tries  \\\n","0                 1899      0        2       17       37       29       12   \n","1                 1973      0        4       21       38       26        9   \n","2                 1919      0        2       16       38       30       12   \n","3                 1937      0        3       21       40       25        9   \n","4                 2012      0        2       17       35       29       14   \n","\n","   7 or more tries (X)  difficulty word_format  max_word_repetition  \n","0                    2         440       12345                    1  \n","1                    1         417       12345                    1  \n","2                    2         446       12345                    1  \n","3                    1         418       12345                    1  \n","4                    3         454       12342                    2  "],"text/html":["\n","  <div id=\"df-d3055a82-a8e3-4388-99f2-bb344f6b1d06\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Contest number</th>\n","      <th>Word</th>\n","      <th>Number of  reported results</th>\n","      <th>Number in hard mode</th>\n","      <th>1 try</th>\n","      <th>2 tries</th>\n","      <th>3 tries</th>\n","      <th>4 tries</th>\n","      <th>5 tries</th>\n","      <th>6 tries</th>\n","      <th>7 or more tries (X)</th>\n","      <th>difficulty</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2022-12-31</td>\n","      <td>560</td>\n","      <td>manly</td>\n","      <td>20380.0</td>\n","      <td>1899</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>37</td>\n","      <td>29</td>\n","      <td>12</td>\n","      <td>2</td>\n","      <td>440</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2022-12-30</td>\n","      <td>559</td>\n","      <td>molar</td>\n","      <td>21204.0</td>\n","      <td>1973</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>21</td>\n","      <td>38</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>417</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2022-12-29</td>\n","      <td>558</td>\n","      <td>havoc</td>\n","      <td>20001.0</td>\n","      <td>1919</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>16</td>\n","      <td>38</td>\n","      <td>30</td>\n","      <td>12</td>\n","      <td>2</td>\n","      <td>446</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2022-12-28</td>\n","      <td>557</td>\n","      <td>impel</td>\n","      <td>20160.0</td>\n","      <td>1937</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>21</td>\n","      <td>40</td>\n","      <td>25</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>418</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022-12-27</td>\n","      <td>556</td>\n","      <td>condo</td>\n","      <td>20879.0</td>\n","      <td>2012</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>35</td>\n","      <td>29</td>\n","      <td>14</td>\n","      <td>3</td>\n","      <td>454</td>\n","      <td>12342</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3055a82-a8e3-4388-99f2-bb344f6b1d06')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d3055a82-a8e3-4388-99f2-bb344f6b1d06 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d3055a82-a8e3-4388-99f2-bb344f6b1d06');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["temp = data[['difficulty','word_format','max_word_repetition']]\n","temp.sort_values(by=['difficulty']).head(20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"O9vW3UWWvv8m","executionInfo":{"status":"ok","timestamp":1676678634218,"user_tz":300,"elapsed":8,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"aaccaeeb-2997-4e30-a520-8eee805300bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     difficulty word_format  max_word_repetition\n","241         310       12345                    1\n","253         337       12345                    1\n","147         345       12345                    1\n","35          345       12345                    1\n","266         345       12345                    1\n","12          346       12345                    1\n","285         347       12345                    1\n","312         347       12345                    1\n","11          347       12345                    1\n","246         349       12345                    1\n","346         350       12345                    1\n","56          351       12345                    1\n","211         352       12345                    1\n","86          354       12345                    1\n","52          354       12345                    1\n","105         355       12345                    1\n","133         355       12341                    2\n","200         356       12345                    1\n","22          356       12345                    1\n","33          357       12345                    1"],"text/html":["\n","  <div id=\"df-2a68709f-8bcf-46f2-94ba-6433cd309ad3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>difficulty</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>241</th>\n","      <td>310</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>253</th>\n","      <td>337</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>345</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>345</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>345</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>346</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>347</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>312</th>\n","      <td>347</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>347</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>246</th>\n","      <td>349</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>346</th>\n","      <td>350</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>351</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>352</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>354</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>354</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>355</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>133</th>\n","      <td>355</td>\n","      <td>12341</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>356</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>356</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>357</td>\n","      <td>12345</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a68709f-8bcf-46f2-94ba-6433cd309ad3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2a68709f-8bcf-46f2-94ba-6433cd309ad3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2a68709f-8bcf-46f2-94ba-6433cd309ad3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt \n","x = temp['max_word_repetition']\n","y = temp['difficulty']\n","z = temp['word_format']\n","# plt.scatter(x,y)\n","plt.scatter(y,z)\n","a = temp['difficulty'].groupby(temp.word_format).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":767},"id":"gU-YmL3-wEYJ","executionInfo":{"status":"ok","timestamp":1676678634359,"user_tz":300,"elapsed":148,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"c7879859-a6ea-45d8-adc4-b3845c12d889"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   word_format        mean  median           var  count\n","0        12113  607.000000   607.0           NaN      1\n","1        12123  488.500000   488.5     84.500000      2\n","2        12134  446.833333   445.5    697.766667      6\n","3        12234  444.777778   439.0   1167.194444      9\n","4        12311  510.000000   510.0           NaN      1\n","5        12314  483.200000   476.0   1994.457143     15\n","6        12321  459.000000   459.0           NaN      1\n","7        12324  446.375000   439.5   1524.553571      8\n","8        12332  453.000000   453.0           NaN      1\n","9        12334  447.266667   436.0   1072.638095     15\n","10       12341  436.200000   427.0   1395.600000     15\n","11       12342  443.250000   454.5   1819.357143      8\n","12       12343  470.500000   382.0  24627.100000      6\n","13       12344  450.833333   448.5   1288.696970     12\n","14       12345  416.934363   410.0   1917.410404    259"],"text/html":["\n","  <div id=\"df-ff01a345-6f58-48ea-acd6-802daedf364d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>word_format</th>\n","      <th>mean</th>\n","      <th>median</th>\n","      <th>var</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12113</td>\n","      <td>607.000000</td>\n","      <td>607.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>12123</td>\n","      <td>488.500000</td>\n","      <td>488.5</td>\n","      <td>84.500000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12134</td>\n","      <td>446.833333</td>\n","      <td>445.5</td>\n","      <td>697.766667</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12234</td>\n","      <td>444.777778</td>\n","      <td>439.0</td>\n","      <td>1167.194444</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>12311</td>\n","      <td>510.000000</td>\n","      <td>510.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>12314</td>\n","      <td>483.200000</td>\n","      <td>476.0</td>\n","      <td>1994.457143</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>12321</td>\n","      <td>459.000000</td>\n","      <td>459.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>12324</td>\n","      <td>446.375000</td>\n","      <td>439.5</td>\n","      <td>1524.553571</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>12332</td>\n","      <td>453.000000</td>\n","      <td>453.0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>12334</td>\n","      <td>447.266667</td>\n","      <td>436.0</td>\n","      <td>1072.638095</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>12341</td>\n","      <td>436.200000</td>\n","      <td>427.0</td>\n","      <td>1395.600000</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>12342</td>\n","      <td>443.250000</td>\n","      <td>454.5</td>\n","      <td>1819.357143</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>12343</td>\n","      <td>470.500000</td>\n","      <td>382.0</td>\n","      <td>24627.100000</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>12344</td>\n","      <td>450.833333</td>\n","      <td>448.5</td>\n","      <td>1288.696970</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>12345</td>\n","      <td>416.934363</td>\n","      <td>410.0</td>\n","      <td>1917.410404</td>\n","      <td>259</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff01a345-6f58-48ea-acd6-802daedf364d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ff01a345-6f58-48ea-acd6-802daedf364d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ff01a345-6f58-48ea-acd6-802daedf364d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.scatter(y,x)\n","b = temp['difficulty'].groupby(temp.max_word_repetition).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"ZNHXYJeV4lTK","executionInfo":{"status":"ok","timestamp":1676678634528,"user_tz":300,"elapsed":172,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"dc9f175a-ac1c-47e4-b821-20a5bf301a43"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   max_word_repetition        mean  median          var  count\n","0                    1  416.934363   410.0  1917.410404    259\n","1                    2  453.295918   446.0  2689.736272     98\n","2                    3  558.500000   558.5  4704.500000      2"],"text/html":["\n","  <div id=\"df-23544a59-d8a4-424f-a574-5dcc7e6067ee\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>max_word_repetition</th>\n","      <th>mean</th>\n","      <th>median</th>\n","      <th>var</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>416.934363</td>\n","      <td>410.0</td>\n","      <td>1917.410404</td>\n","      <td>259</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>453.295918</td>\n","      <td>446.0</td>\n","      <td>2689.736272</td>\n","      <td>98</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>558.500000</td>\n","      <td>558.5</td>\n","      <td>4704.500000</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23544a59-d8a4-424f-a574-5dcc7e6067ee')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-23544a59-d8a4-424f-a574-5dcc7e6067ee button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-23544a59-d8a4-424f-a574-5dcc7e6067ee');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["pip install textstat"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HKDcl-DK8TLr","executionInfo":{"status":"ok","timestamp":1676846978816,"user_tz":300,"elapsed":3192,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"06bfaac3-00f8-46b1-f27a-fc67ffe07658"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting textstat\n","  Downloading textstat-0.7.3-py3-none-any.whl (105 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m105.1/105.1 KB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pyphen\n","  Downloading pyphen-0.13.2-py3-none-any.whl (2.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m95.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pyphen, textstat\n","Successfully installed pyphen-0.13.2 textstat-0.7.3\n"]}]},{"cell_type":"code","source":["import textstat\n","\n","word = \"Balter\"\n","# word = \"one\"\n","\n","diff_score = textstat.difficult_words(word)\n","syllable = textstat.syllable_count(word)\n","grade_level = textstat.linsear_write_formula(word)\n","\n","print(diff_score)\n","# 0 False, 1 True\n","print(syllable)\n","# number of syllable of words"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jHP6N38s8Kob","executionInfo":{"status":"ok","timestamp":1676848498245,"user_tz":300,"elapsed":118,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"fccdd287-bdcf-4d88-cab1-539f3a9c8563"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n"]}]},{"cell_type":"code","source":["df['diff_score'] = 1\n","df['syllable'] = 2\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"uNkgEbwL3nf2","executionInfo":{"status":"ok","timestamp":1676848500213,"user_tz":300,"elapsed":105,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"fcdd0c61-8685-483c-f462-c3cc28848b6d"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition  diff_score  syllable\n","0  eerie       11231                    3           1         2"],"text/html":["\n","  <div id=\"df-4774109e-b8ca-469d-9f83-23d43f2b5be7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4774109e-b8ca-469d-9f83-23d43f2b5be7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4774109e-b8ca-469d-9f83-23d43f2b5be7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4774109e-b8ca-469d-9f83-23d43f2b5be7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["data['diff_score'] = data['Word'].apply(lambda x:textstat.difficult_words(x))\n","data['syllable'] = data['Word'].apply(lambda x:textstat.syllable_count(x))"],"metadata":{"id":"1KbxrHte2Nvr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = data['diff_score']\n","y = data['syllable']\n","target = data['difficulty']\n","# plt.scatter(x,y)\n","plt.scatter(x,target)\n","c = data['difficulty'].groupby(data.diff_score).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"PRNSVvDG2c2j","executionInfo":{"status":"ok","timestamp":1676679082949,"user_tz":300,"elapsed":276,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"14ee9918-fd0a-42c8-8f65-d45358d88e87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   diff_score        mean  median          var  count\n","0           0  422.717391   416.5  2161.345296    276\n","1           1  444.048193   433.0  3235.802527     83"],"text/html":["\n","  <div id=\"df-e9aa5f78-dc15-494a-8756-f0b7b63fd2d2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>diff_score</th>\n","      <th>mean</th>\n","      <th>median</th>\n","      <th>var</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>422.717391</td>\n","      <td>416.5</td>\n","      <td>2161.345296</td>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>444.048193</td>\n","      <td>433.0</td>\n","      <td>3235.802527</td>\n","      <td>83</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9aa5f78-dc15-494a-8756-f0b7b63fd2d2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e9aa5f78-dc15-494a-8756-f0b7b63fd2d2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e9aa5f78-dc15-494a-8756-f0b7b63fd2d2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.scatter(y,target)\n","d = data['difficulty'].groupby(data.syllable).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","d"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"3OEeVX9f20zh","executionInfo":{"status":"ok","timestamp":1676679084738,"user_tz":300,"elapsed":490,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"a269d742-cfa9-44b4-e651-a0342938e173"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   syllable       mean  median          var  count\n","0         1  422.08800   416.5  2245.197044    250\n","1         2  440.40367   429.0  2816.872579    109"],"text/html":["\n","  <div id=\"df-4df178a6-3b15-4cb3-9353-e70a46d16d20\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>syllable</th>\n","      <th>mean</th>\n","      <th>median</th>\n","      <th>var</th>\n","      <th>count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>422.08800</td>\n","      <td>416.5</td>\n","      <td>2245.197044</td>\n","      <td>250</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>440.40367</td>\n","      <td>429.0</td>\n","      <td>2816.872579</td>\n","      <td>109</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4df178a6-3b15-4cb3-9353-e70a46d16d20')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4df178a6-3b15-4cb3-9353-e70a46d16d20 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4df178a6-3b15-4cb3-9353-e70a46d16d20');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# !pip uninstall nltk\n","# !pip install -U nltk"],"metadata":{"id":"ZLj3JoQd8XTL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import nltk\n","nltk.download('wordnet')\n","nltk.download('brown')\n","nltk.download('reuters')\n","nltk.download('omw-1.4')\n","nltk.download('gutenberg')\n","corpus1 = nltk.corpus.brown\n","corpus2 = nltk.corpus.reuters\n","corpus3 = nltk.corpus.gutenberg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a1a10XHz9L8l","executionInfo":{"status":"ok","timestamp":1676848505631,"user_tz":300,"elapsed":290,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"f3d002ee-75f3-4151-aac9-ab0a0162ec33"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package brown to /root/nltk_data...\n","[nltk_data]   Package brown is already up-to-date!\n","[nltk_data] Downloading package reuters to /root/nltk_data...\n","[nltk_data]   Package reuters is already up-to-date!\n","[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n","[nltk_data]   Package omw-1.4 is already up-to-date!\n","[nltk_data] Downloading package gutenberg to /root/nltk_data...\n","[nltk_data]   Package gutenberg is already up-to-date!\n"]}]},{"cell_type":"code","source":["# check word frequency in Brown and Reuters corpus\n","import nltk\n","\n","def get_brown_word_frequency(word):\n","    # Load the Brown Corpus (or another corpus of your choice)\n","    # Calculate the frequency of the word in the corpus\n","    freq = corpus1.words().count(word.lower())\n","    return freq\n","word_list = ['Balter','one','hello','havoc','parer','doubt','taunt']\n","for word in word_list:\n","    print(word,':',get_brown_word_frequency(word))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7-TMpiNSATup","executionInfo":{"status":"ok","timestamp":1676847139069,"user_tz":300,"elapsed":12995,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"a2e3628b-a9ca-4b66-8623-ec53c06ca4c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Balter : 0\n","one : 2873\n","hello : 4\n","havoc : 3\n","parer : 0\n","doubt : 113\n","taunt : 4\n"]}]},{"cell_type":"code","source":["import nltk\n","\n","def get_reuters_word_frequency(word):\n","    # Load the Brown Corpus (or another corpus of your choice)\n","    # Calculate the frequency of the word in the corpus\n","    freq = corpus2.words().count(word.lower())\n","    return freq\n","word_list = ['Balter','one','hello','havoc','parer','doubt','taunt']\n","for word in word_list:\n","    print(word,':',get_reuters_word_frequency(word))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uE1qrINpgAZs","executionInfo":{"status":"ok","timestamp":1676847158811,"user_tz":300,"elapsed":19748,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"5ef04d1e-e712-4840-9747-4212defb0867"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Balter : 0\n","one : 2584\n","hello : 0\n","havoc : 1\n","parer : 0\n","doubt : 40\n","taunt : 0\n"]}]},{"cell_type":"code","source":["import nltk\n","\n","def get_gutenberg_word_frequency(word):\n","    # Load the Brown Corpus (or another corpus of your choice)\n","    # Calculate the frequency of the word in the corpus\n","    freq = corpus3.words().count(word.lower())\n","    return freq\n","word_list = ['Balter','one','hello','havoc','parer','doubt','taunt']\n","for word in word_list:\n","    print(word,':',get_reuters_word_frequency(word))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3SqPPefY8QVa","executionInfo":{"status":"ok","timestamp":1676680488620,"user_tz":300,"elapsed":29846,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"8d4fd23d-d762-4783-89e4-eca400fb49ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Balter : 0\n","one : 2584\n","hello : 0\n","havoc : 1\n","parer : 0\n","doubt : 40\n","taunt : 0\n"]}]},{"cell_type":"code","source":["x = 'eerie'\n","df['brown_freq'] = get_brown_word_frequency(x)\n","df['reuters_freq'] = get_reuters_word_frequency(x)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"znf1BP9L4WXK","executionInfo":{"status":"ok","timestamp":1676848516334,"user_tz":300,"elapsed":4376,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"b610c12f-0a11-4a07-8cae-86d3ab7caca9"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition  diff_score  syllable  brown_freq  \\\n","0  eerie       11231                    3           1         2           2   \n","\n","   reuters_freq  \n","0             0  "],"text/html":["\n","  <div id=\"df-4eaeaa33-7e2e-4691-af10-b9c993e1598a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","      <th>brown_freq</th>\n","      <th>reuters_freq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4eaeaa33-7e2e-4691-af10-b9c993e1598a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4eaeaa33-7e2e-4691-af10-b9c993e1598a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4eaeaa33-7e2e-4691-af10-b9c993e1598a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49},"id":"j8-iTmJW66TS","executionInfo":{"status":"ok","timestamp":1676847864838,"user_tz":300,"elapsed":119,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"39234bb2-9b5a-42e6-c060-06257b3ad9e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [reuters_freq, Length, Freq_HAL, Log_Freq_HAL, I_Mean_RT, I_Zscore, I_SD\tObs, I_Mean_Accuracy]\n","Index: []"],"text/html":["\n","  <div id=\"df-3823aa81-48e2-40f4-95ba-62dc1744dab8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>reuters_freq</th>\n","      <th>Length</th>\n","      <th>Freq_HAL</th>\n","      <th>Log_Freq_HAL</th>\n","      <th>I_Mean_RT</th>\n","      <th>I_Zscore</th>\n","      <th>I_SD\\tObs</th>\n","      <th>I_Mean_Accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3823aa81-48e2-40f4-95ba-62dc1744dab8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3823aa81-48e2-40f4-95ba-62dc1744dab8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3823aa81-48e2-40f4-95ba-62dc1744dab8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["c = ['Length','Freq_HAL','Log_Freq_HAL','I_Mean_RT','I_Zscore','I_SD','Obs','I_Mean_Accuracy']\n","v = [5, 772 , 6.65 ,798.48, 0.12, 415.79, 27, 0.82]\n","for i in range(len(c)):\n","    df[c[i]] = v[i]\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":144},"id":"AbGYSdxB5AzR","executionInfo":{"status":"ok","timestamp":1676848520109,"user_tz":300,"elapsed":136,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"3d0e2030-f9b1-4d1f-c9dc-79463ffbd878"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition  diff_score  syllable  brown_freq  \\\n","0  eerie       11231                    3           1         2           2   \n","\n","   reuters_freq  Length  Freq_HAL  Log_Freq_HAL  I_Mean_RT  I_Zscore    I_SD  \\\n","0             0       5       772          6.65     798.48      0.12  415.79   \n","\n","   Obs  I_Mean_Accuracy  \n","0   27             0.82  "],"text/html":["\n","  <div id=\"df-75a823b8-f4c7-4e7d-b9fb-057468066541\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","      <th>brown_freq</th>\n","      <th>reuters_freq</th>\n","      <th>Length</th>\n","      <th>Freq_HAL</th>\n","      <th>Log_Freq_HAL</th>\n","      <th>I_Mean_RT</th>\n","      <th>I_Zscore</th>\n","      <th>I_SD</th>\n","      <th>Obs</th>\n","      <th>I_Mean_Accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>772</td>\n","      <td>6.65</td>\n","      <td>798.48</td>\n","      <td>0.12</td>\n","      <td>415.79</td>\n","      <td>27</td>\n","      <td>0.82</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75a823b8-f4c7-4e7d-b9fb-057468066541')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-75a823b8-f4c7-4e7d-b9fb-057468066541 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-75a823b8-f4c7-4e7d-b9fb-057468066541');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["l = ['f','g','j','m','p','q','v','w','x','z','oo','ir','ph','ly','ve','wh','sk','ch','ck','ng','qu','th']\n","for i in range(len(l)):\n","    df[l[i]] = 0\n","df\n"],"metadata":{"id":"e90gULbQ5524","executionInfo":{"status":"ok","timestamp":1676848534806,"user_tz":300,"elapsed":167,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"colab":{"base_uri":"https://localhost:8080/","height":174},"outputId":"1282b793-b3be-4c0b-9e05-10c2994c4e60"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition  diff_score  syllable  brown_freq  \\\n","0  eerie       11231                    3           1         2           2   \n","\n","   reuters_freq  Length  Freq_HAL  Log_Freq_HAL  ...  ph  ly  ve  wh  sk  ch  \\\n","0             0       5       772          6.65  ...   0   0   0   0   0   0   \n","\n","   ck  ng  qu  th  \n","0   0   0   0   0  \n","\n","[1 rows x 37 columns]"],"text/html":["\n","  <div id=\"df-b4fad99b-6ad5-460b-8352-b264c3fc3eb9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","      <th>brown_freq</th>\n","      <th>reuters_freq</th>\n","      <th>Length</th>\n","      <th>Freq_HAL</th>\n","      <th>Log_Freq_HAL</th>\n","      <th>...</th>\n","      <th>ph</th>\n","      <th>ly</th>\n","      <th>ve</th>\n","      <th>wh</th>\n","      <th>sk</th>\n","      <th>ch</th>\n","      <th>ck</th>\n","      <th>ng</th>\n","      <th>qu</th>\n","      <th>th</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>772</td>\n","      <td>6.65</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 37 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4fad99b-6ad5-460b-8352-b264c3fc3eb9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4fad99b-6ad5-460b-8352-b264c3fc3eb9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4fad99b-6ad5-460b-8352-b264c3fc3eb9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["c = ['short_1','short_2','short_3','short_4','short_5','all_1','all_2','all_3','all_4','all_5']\n","v = [0,12,151,833,1312,2,79,987,4659,9127]\n","for i in range(len(c)):\n","    df[c[i]] = v[i]\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"NXSINzg79il_","executionInfo":{"status":"ok","timestamp":1676848791861,"user_tz":300,"elapsed":175,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"10ceb335-91ba-4aaf-836a-d22f5a8c2fb5"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Word word_format  max_word_repetition  diff_score  syllable  brown_freq  \\\n","0  eerie       11231                    3           1         2           2   \n","\n","   reuters_freq  Length  Freq_HAL  Log_Freq_HAL  ...  short_1  short_2  \\\n","0             0       5       772          6.65  ...        0       12   \n","\n","   short_3  short_4  short_5  all_1  all_2  all_3  all_4  all_5  \n","0      151      833     1312      2     79    987   4659   9127  \n","\n","[1 rows x 47 columns]"],"text/html":["\n","  <div id=\"df-2022def0-3d29-40e3-8f14-61cdc7093ca5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Word</th>\n","      <th>word_format</th>\n","      <th>max_word_repetition</th>\n","      <th>diff_score</th>\n","      <th>syllable</th>\n","      <th>brown_freq</th>\n","      <th>reuters_freq</th>\n","      <th>Length</th>\n","      <th>Freq_HAL</th>\n","      <th>Log_Freq_HAL</th>\n","      <th>...</th>\n","      <th>short_1</th>\n","      <th>short_2</th>\n","      <th>short_3</th>\n","      <th>short_4</th>\n","      <th>short_5</th>\n","      <th>all_1</th>\n","      <th>all_2</th>\n","      <th>all_3</th>\n","      <th>all_4</th>\n","      <th>all_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>eerie</td>\n","      <td>11231</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>772</td>\n","      <td>6.65</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>151</td>\n","      <td>833</td>\n","      <td>1312</td>\n","      <td>2</td>\n","      <td>79</td>\n","      <td>987</td>\n","      <td>4659</td>\n","      <td>9127</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 47 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2022def0-3d29-40e3-8f14-61cdc7093ca5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2022def0-3d29-40e3-8f14-61cdc7093ca5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2022def0-3d29-40e3-8f14-61cdc7093ca5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["df.to_csv('test.csv')"],"metadata":{"id":"cKGA0GOk-hiN","executionInfo":{"status":"ok","timestamp":1676848807960,"user_tz":300,"elapsed":123,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["data['brown_freq'] = data['Word'].apply(lambda x:get_brown_word_frequency(x))\n","data['reuters_freq'] = data['Word'].apply(lambda x:get_reuters_word_frequency(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"ifq1-QvN3MFy","executionInfo":{"status":"error","timestamp":1676679798765,"user_tz":300,"elapsed":501148,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"734f7a0e-ba56-47da-97c6-6ce939c9b14e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-8577946ad459>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'brown_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mget_brown_word_frequency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'reuters_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mget_reuters_word_frequency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4355\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4356\u001b[0m         \"\"\"\n\u001b[0;32m-> 4357\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mSeriesApply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert_dtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4358\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4359\u001b[0m     def _reduce(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1041\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1043\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1044\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0magg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 \u001b[0;31m# List[Union[Callable[..., Any], str]]]]]\"; expected\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1097\u001b[0m                 \u001b[0;31m# \"Callable[[Any], Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m                 mapped = lib.map_infer(\n\u001b[0m\u001b[1;32m   1099\u001b[0m                     \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-33-8577946ad459>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'brown_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mget_brown_word_frequency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'reuters_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mget_reuters_word_frequency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-819b7fe58260>\u001b[0m in \u001b[0;36mget_brown_word_frequency\u001b[0;34m(word)\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mcorpus\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorpus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbrown\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;31m# Calculate the frequency of the word in the corpus\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mfreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorpus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfreq\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mword_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Balter'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'one'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'hello'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'havoc'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'parer'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'doubt'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'taunt'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/collections.py\u001b[0m in \u001b[0;36mcount\u001b[0;34m(self, value)\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m         \u001b[0;34m\"\"\"Return the number of times this list contains ``value``.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0melt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0melt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/collections.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m         \u001b[0;34m\"\"\"Return the number of times this list contains ``value``.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0melt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0melt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/corpus/reader/util.py\u001b[0m in \u001b[0;36miterate_from\u001b[0;34m(self, start_tok)\u001b[0m\n\u001b[1;32m    422\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    423\u001b[0m             \u001b[0;31m# Get everything we can from this piece.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 424\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpiece\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterate_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_tok\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0moffset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    425\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    426\u001b[0m             \u001b[0;31m# Update the offset table.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/corpus/reader/util.py\u001b[0m in \u001b[0;36miterate_from\u001b[0;34m(self, start_tok)\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_current_toknum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtoknum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_current_blocknum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblock_index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 306\u001b[0;31m             \u001b[0mtokens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_block\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stream\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m             assert isinstance(tokens, (tuple, list, AbstractLazySequence)), (\n\u001b[1;32m    308\u001b[0m                 \u001b[0;34m\"block reader %s() should return list or tuple.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/corpus/reader/tagged.py\u001b[0m in \u001b[0;36mread_block\u001b[0;34m(self, stream)\u001b[0m\n\u001b[1;32m    291\u001b[0m             \u001b[0mpara\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0msent_str\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sent_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpara_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 293\u001b[0;31m                 sent = [\n\u001b[0m\u001b[1;32m    294\u001b[0m                     \u001b[0mstr2tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m                     \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_word_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/corpus/reader/tagged.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0msent_str\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sent_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpara_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m                 sent = [\n\u001b[0;32m--> 294\u001b[0;31m                     \u001b[0mstr2tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m                     \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_word_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m                 ]\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/nltk/tag/util.py\u001b[0m in \u001b[0;36mstr2tuple\u001b[0;34m(s, sep)\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mloc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msep\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["x = data['brown_freq']\n","y = data['reuters_freq']\n","target = data['difficulty']\n","# plt.scatter(x,y)\n","plt.scatter(x,target)\n","e = data['difficulty'].groupby(data.brown_freq).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","e"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":517},"id":"mDwCtINP3glI","executionInfo":{"status":"error","timestamp":1676679234073,"user_tz":300,"elapsed":164,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"e37023a4-754d-4682-ab7e-b7bc15d7d8d8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'brown_freq'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-5a3724431ed7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'brown_freq'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'reuters_freq'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'difficulty'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# plt.scatter(x,y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'brown_freq'"]}]},{"cell_type":"code","source":["plt.scatter(y,target)\n","f = data['difficulty'].groupby(data.reuters_freq).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","f"],"metadata":{"id":"eJMYyNUq3wre"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install wikipedia"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"50PJ9eC99Ex9","executionInfo":{"status":"ok","timestamp":1676680206205,"user_tz":300,"elapsed":5231,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"b4a76ffa-c1a7-4930-8df1-6d660015fda4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: wikipedia in /usr/local/lib/python3.8/dist-packages (1.4.0)\n","Requirement already satisfied: requests<3.0.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from wikipedia) (2.25.1)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.8/dist-packages (from wikipedia) (4.6.3)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2022.12.7)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (4.0.0)\n"]}]},{"cell_type":"code","source":["def wiki_search_count(word,num=1000):\n","    source = wikipedia.search(word, results=num, suggestion=False)\n","    result = sum(word in i.lower() for i in source)\n","    return result"],"metadata":{"id":"Fb7I0C6d4bwt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import wikipedia\n","query = 'parer'\n","word_list = ['balter','one','hello','havoc','parer','doubt','taunt']\n","for word in word_list:\n","    print(word,':',wiki_search_count(word))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fv4r_jvAiick","executionInfo":{"status":"ok","timestamp":1676680206740,"user_tz":300,"elapsed":200,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"c655fa9b-8197-472e-9a00-c7b709c37cf1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["balter : 11\n","one : 411\n","hello : 271\n","havoc : 63\n","parer : 6\n","doubt : 100\n","taunt : 5\n"]}]},{"cell_type":"code","source":["data['wiki_freq'] = data['Word'].apply(lambda x:wiki_search_count(x))\n","x = data['wiki_freq']\n","target = data['difficulty']\n","# plt.scatter(x,y)\n","plt.scatter(x,target)\n","g = data['difficulty'].groupby(data.wiki_freq).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","g"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"vg-yhPyd5B1R","executionInfo":{"status":"error","timestamp":1676680355017,"user_tz":300,"elapsed":146613,"user":{"displayName":"Alex Zou","userId":"00482416019470548107"}},"outputId":"fc230c30-07b2-4a8f-987f-99471ba01503"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-51-7d3e5b27e17a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wiki_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mwiki_search_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wiki_freq'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'difficulty'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# plt.scatter(x,y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4355\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4356\u001b[0m         \"\"\"\n\u001b[0;32m-> 4357\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mSeriesApply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert_dtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4358\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4359\u001b[0m     def _reduce(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1041\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1043\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1044\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0magg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 \u001b[0;31m# List[Union[Callable[..., Any], str]]]]]\"; expected\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1097\u001b[0m                 \u001b[0;31m# \"Callable[[Any], Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m                 mapped = lib.map_infer(\n\u001b[0m\u001b[1;32m   1099\u001b[0m                     \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-51-7d3e5b27e17a>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wiki_freq'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Word'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mwiki_search_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'wiki_freq'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'difficulty'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# plt.scatter(x,y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-49-c55b807a1e67>\u001b[0m in \u001b[0;36mwiki_search_count\u001b[0;34m(word, num)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mwiki_search_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0msource\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwikipedia\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msuggestion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/wikipedia/util.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     26\u001b[0m       \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m       \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/wikipedia/wikipedia.py\u001b[0m in \u001b[0;36msearch\u001b[0;34m(query, results, suggestion)\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0msearch_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'srinfo'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'suggestion'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m   \u001b[0mraw_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_wiki_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msearch_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mraw_results\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/wikipedia/wikipedia.py\u001b[0m in \u001b[0;36m_wiki_request\u001b[0;34m(params)\u001b[0m\n\u001b[1;32m    735\u001b[0m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait_time\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtotal_seconds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 737\u001b[0;31m   \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAPI_URL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    738\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    739\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mRATE_LIMIT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(url, params, **kwargs)\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'allow_redirects'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'get'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;31m# cases, and look like a memory leak in others.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    540\u001b[0m         }\n\u001b[1;32m    541\u001b[0m         \u001b[0msend_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m         \u001b[0mresp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msend_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0;31m# Redirect resolving generator.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    676\u001b[0m             \u001b[0mgen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve_redirects\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 677\u001b[0;31m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mresp\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mresp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    678\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0;31m# Redirect resolving generator.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    676\u001b[0m             \u001b[0mgen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve_redirects\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 677\u001b[0;31m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mresp\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mresp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    678\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mresolve_redirects\u001b[0;34m(self, resp, req, stream, timeout, verify, cert, proxies, yield_requests, **adapter_kwargs)\u001b[0m\n\u001b[1;32m    235\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m                 resp = self.send(\n\u001b[0m\u001b[1;32m    238\u001b[0m                     \u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m                     \u001b[0mstream\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    653\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m         \u001b[0;31m# Send the request\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 655\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madapter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    656\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m         \u001b[0;31m# Total elapsed time of the request (approximately)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    437\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mchunked\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 439\u001b[0;31m                 resp = conn.urlopen(\n\u001b[0m\u001b[1;32m    440\u001b[0m                     \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m                     \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    595\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m             \u001b[0;31m# Make the request on the httplib connection object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m             httplib_response = self._make_request(conn, method, url,\n\u001b[0m\u001b[1;32m    598\u001b[0m                                                   \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout_obj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m                                                   \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;31m# Trigger any extra validation we need to do.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    342\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 343\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_conn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    344\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSocketTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBaseSSLError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    345\u001b[0m             \u001b[0;31m# Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_validate_conn\u001b[0;34m(self, conn)\u001b[0m\n\u001b[1;32m    837\u001b[0m         \u001b[0;31m# Force connect early to allow us to validate the connection.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    838\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'sock'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# AppEngine might not have  `.sock`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 839\u001b[0;31m             \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    841\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_verified\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/urllib3/connection.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0mcontext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mssl_context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m         \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverify_mode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresolve_cert_reqs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcert_reqs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 337\u001b[0;31m         self.sock = ssl_wrap_socket(\n\u001b[0m\u001b[1;32m    338\u001b[0m             \u001b[0msock\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    339\u001b[0m             \u001b[0mkeyfile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey_file\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/urllib3/util/ssl_.py\u001b[0m in \u001b[0;36mssl_wrap_socket\u001b[0;34m(sock, keyfile, certfile, cert_reqs, ca_certs, server_hostname, ssl_version, ciphers, ssl_context, ca_cert_dir)\u001b[0m\n\u001b[1;32m    343\u001b[0m             or IS_SECURETRANSPORT):\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mHAS_SNI\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mserver_hostname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrap_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mserver_hostname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mserver_hostname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         warnings.warn(\n","\u001b[0;32m/usr/lib/python3.8/ssl.py\u001b[0m in \u001b[0;36mwrap_socket\u001b[0;34m(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;31m# SSLSocket class handles server_hostname encoding before it calls\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m         \u001b[0;31m# ctx._wrap_socket()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 500\u001b[0;31m         return self.sslsocket_class._create(\n\u001b[0m\u001b[1;32m    501\u001b[0m             \u001b[0msock\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msock\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mserver_side\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mserver_side\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.8/ssl.py\u001b[0m in \u001b[0;36m_create\u001b[0;34m(cls, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, context, session)\u001b[0m\n\u001b[1;32m   1038\u001b[0m                         \u001b[0;31m# non-blocking\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1039\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"do_handshake_on_connect should not be specified for non-blocking sockets\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_handshake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mOSError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.8/ssl.py\u001b[0m in \u001b[0;36mdo_handshake\u001b[0;34m(self, block)\u001b[0m\n\u001b[1;32m   1307\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0.0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_handshake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["import wikipedia\n","# just to see if the word is easily find\n","def wiki_difficult_word(word):\n","    try:\n","        # Get the Simple English Wikipedia page for the word\n","        page = wikipedia.page(word, auto_suggest=False, preload=True, redirect=True)\n","        # Return True if the word count is greater than the threshold\n","        return False\n","    except:\n","        # If the word is not found or an error occurs, assume it is a difficult word\n","        return True\n","word_list = ['one','hello','havoc','parer','doubt','taunt']\n","for word in word_list:\n","    print(word,':',wiki_difficult_word(word))"],"metadata":{"id":"3DGEyo-s-fVD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['wiki_difficult'] = data['Word'].apply(lambda x:wiki_difficult_word(x))\n","x = data['wiki_difficult']\n","target = data['difficulty']\n","# plt.scatter(x,y)\n","plt.scatter(x,target)\n","h = data['difficulty'].groupby(data.wiki_difficult).agg([\"mean\", \"median\", \"var\",\"count\"]).reset_index() \n","h"],"metadata":{"id":"hUDXjiUU5PBh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"gvhY2_Xc6O6P"},"execution_count":null,"outputs":[]}]}